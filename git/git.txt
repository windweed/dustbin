1，基本操作


$ git config --global core.editor vim
$ cat .gitconfig
[user]
        name = swing
        email = ziijchen@outlook.com
[core]
        editor = vim

1.1.1 SSH key (重要)
	$ git config --global --list
	若无配置, 则需:
	$ git config --global user.name "xiaoming_win10"
	$ git config --global user.email "xiaoming@163.com"
		# --global参数表示这台机器上所有的git仓库都会使用这个配置
		# 也可以对某个仓库指定不同的用户名和Email地址
	$ ssh-keygen -t rsa -C "xiaoming@163.com"
		选择目录的时候直接回车使用默认目录, 也可指定目录. 密码也是可选的.直接回车
		把~/.ssh/id_rsa.pub (windows是c:/users/xiaoming/.ssh/id_rsa.pub)里的内容粘进
		github主页→settings→ssh and GPG keys→ new SSH keys

1.1.2 基操
	查看当前状态(一般用在 $ git add 之前)
		$ git status

	修改后，提交到stage区
		$ git add .    # 这里一般. 就可以
		$ git commit -m "my commit"    # 提交到本地库
		$ git push origin master    # 推到远程
		$ git pull origin master    # 拉取
		
1.2 将本地仓库与远程仓库关联 (重要)
	# 用本地文件创建(初始化)一个远程repository。非常实用和常用
	$ git remote add origin git@github.com:xiaoming/hello.git
		# 注:很容易写错成...origin master ...
		# 到这一步的时候还没有指定关联的远程分支
		# origin 可以换名字。这只是对远程仓库的一个引用
	$ git add .
	$ git commit -m "hello"
		# 若为空文件夹则这两步可省略，若不空一定不能省略	
	$ git push -u origin master    # 把本地库的所有内容推送到远程库上 #推荐	
	或 $ git pull --rebase origin master  
		# 若空文件夹则可不加--rebase  #一般来说用这一条的时候本地不可能是空的
		# 拉取哪个分支是随意的，这里以master为例
	# 本地分支默认只有master, 关联其他分支见1.3
	# `git remote add origin ...`这一步如果错误,提示"远程库已存在",则
		$ git remote rm origin

	# 关联默认分支
		$ git branch --set-upstream-to=origin/master

1.3 已有远程分支master和dev，新建本地分支与远程分支关联 (重要)
	$ git checkout -b dev  #新建并切换
	$ git pull origin dev      #拉取远程dev到本地dev

1.4 在本地新建分支并推送到远程 (管理员)
	$ git checkout -b test
	$ git push origin test //会在远程仓库创建一个test分支.  或者
	$ git push origin dev:dev。这样远程仓库也会有一个dev分支

1.5 删除本地分支 (重要)
	# 先切到别的分支上
	$ git branch -d dev    # 不提交无法删除，可用 -D 参数强行删除

1.6 删除远程分支 (管理员)
	$ git push origin  :dev    # push一个空分支
	$ git push origin --delete dev
	删除远程分支后`git branch -a`依然可以看到远程分支
	$ git remote show orging      #查看删除分支情况
	$ git remote prune origin

1.7 本地合并 (重要)
	$ git checkout master  # 目标分支，别的分支要合过来的分支
	$ git merge dev           # 源分支，被合的
	$ git merge dev --squash  # 合并多个commit。合完要commit

1.8 获取远程库中本地没有的部分
	$ git fetch
	$ git fetch origin main


2，切换commit
2.1 回到过去/未来
	$ git reset --hard HEAD^    # 回退到上一个版本(commit)
	$ git reset --hard HEAD^^  # 回退到上上个版本
	$ git reset --hard 123456    # 版本号不用写全
	$ git reflog    # 每一次命令. 然后找到特定commit id

2.2 查看工作区和版本库里面最新版本的区别
	$ git diff HEAD -- readme.txt

2.3 丢弃工作区(workspace)的修改
	$ git checkout -- readme.txt
		# 把readme.txt文件在工作区的修改全部撤销
    		- 若修改后还没有add, 就回到和版本库一模一样的状态
    		- 若已add, 又修改了, 就回到add之后的状态

	$ git reset HEAD readme.txt  # 放弃add
		# (add之后)撤销暂存区的修改, 重新放回工作区    
    		# $ git reset既可回退版本, 也可以把stage的修改回退到working directory

2.4 本地删除后, 要从版本库中删除:  (慎用。可以无视词条)
	$ git rm test.txt
		# 就是放弃这个文件在.git文件夹中的跟踪，之后也无法恢复

2.5 恢复误删的文件: 
	$ git checkout -- test.txt   # 其实本质上是放弃修改。删除也算一种修改
		# 注: git checkout其实是用版本库里的版本替换工作区的版本
		# 这样恢复只能恢复到最新版本, 修改会丢失


3，标签
发布版本时, 通常先在版本库中打一个标签. 这样, 就唯一确定了打标签时刻的版本.
所以标签也是版本库的一个快照.  标签其实就是指向某个commit的指针

3.1 打标签
	首先, 切换到需要打标签的分支:
		$ git checkout master
	然后打标签，默认打在最新提交的commit上：
		$ git tag v1.0
	打到特定commit上：
		$ git log --pretty=oneline --abbrev-commit
		123456 asdfgh
		67aces qwert
		...
		//
		$ git tag v0.9 67aces
	详细tag：(重要)
		$ git tag -a v0.1 -m "version 0.1 released" 67aces
			# -a 指定标签名, -m 指定说明文字

3.2 查看标签:
	$ git tag             # 查看所有标签
	$ git show v0.9   # 查看具体标签信息

3.3 推送标签到远程: (管理员)
	$ git push origin v1.0    # 推送特定标签
	$ git push origin --tags # 推送全部本地未推送的标签

3.4 删除标签:
	本地删除：
		$ git tag -d v0.1
	远程删除: 本地删除之后，
		$ git push origin :refs/tags/v0.9

3.5 私钥签名:  (未使用过)
	$ git tag -s v0.2 -m "signed version 0.2 released" 67aces
		# 签名采用PGP签名


4，查看
4.1 查看某次提交修改的文件
$ git log --name-only


5. 其他
5.1 CRLF 问题
	$ git config --global core.autocrlf input
		# push时把CRLF转换成LF， pull时不转换。
	$ git config --global core.autocrlf true
		# push时自动把CRFL转换成LF，pull时LF转换为CRLF
	$ git config --global core.autocrlf false
		# pull和push都不变



